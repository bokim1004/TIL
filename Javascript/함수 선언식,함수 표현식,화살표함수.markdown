### 함수 선언식

```js
function funcDeclarations() {
  return "A function declaration";
}
funcDeclarations();
```

일반적인 프로그래밍 언어에서의 함수 선언과 비슷한 형식

### 함수 표현식

```js
var funcExpression = function () {
  return "A function expression";
};
funcExpression();
```

### 함수 선언식과 표현식의 차이점

`함수 선언식`은 호이스팅에 영향을 받지만, `함수 표현식`은 호이스팅에 영향을 받지
않는다. 함수 선언식은 코드를 구현한 위치와 관계없이 자바스크립트 특징인
호이스팅에 따라 브라우저가 자바스크립트를 해석할 때 맨 위로 끌어올려진다.

아래 코드를 보자
함수 표현식 sumNumbers에서 var도 호이스팅이 적용되어 위치가 상단으로 끌어올려졌다.
하지만 실제 sumNumbers에 할당될 function로직은 호출된 이후에 선언되므로,
sumNumbers는 함수로 인식하지 않고 변수로 인식한다.

```js
var sumNumbers;
logMessage();
sumNumbers();
sumNumbers = function () {
  return 10 + 20;
};
```

### 함수 표현식의 장점

함수 표현식이 호이스팅에 영향을 받지 않는다는 특징이외에도 함수 선언식보다 유용하게 쓰이는 경우는 다음과 같다.
클로져로 사용, 콜백으로 사용(다른 함수의 인자로 넘길 수 있다)

### 함수 표현식으로 클로져 생성하기

클로저는 함수를 실행하기 전에 해당 함수에 변수를 넘기고 싶을 때 사용된다.

```js
function tabsHandler(index) {
  return function tabClickEvent(event) {
    //바깥 함수인 tabsHandler()의 index인자를 여기서 접근할 수 있다.
    console.log(index); // 탭을 클릭할 때마다 해당 탭의 index값을 표시
  };
}
var tabs = document.querySelectorAll(".tab");
var i;
for (i = 0; i < tabs.length; i++) {
  tabs[i].onclick = tabsHandler(i);
}
```

위 예제는 모든 .tab요소에 클릭 이벤트를 추가하는 예제다.
주목할 점은 클로져을 이용해 tabClickEvent()에서 바깥함수 tabsHandler()의 인자값 index를 접근했다는 점이다.
그런데 의문점은 위에서 사용한 것은 함수 선언식이 아닌가? 함수 선언식에도 클로저가 적용되는것인가???

좋은 예를 봐보자.

```js
var list = ["item1", "item2", "item3"];
var i;
var doSomethingHandler = function (itemIndex) {
  return function doSomething(evt) {
    //클로저가 생성되어, itemIndex를 인자로 참조할 수 있게 된다.
    console.log(list[itemIndex]);
  };
};
for (i = 0; i < list.length; i++) {
  list[i].onclick = doSomethingHandler(i);
}
```

### 한수 선언식, 표현식 호이스팅 예

```js
console.log(sum(1, 2));
console.log(minus(5, 2));

function sum(a, b) {          // 함수 선언문
  return a + b;
}

var minus = function(a, b) {  // 함수 표현식
  reutrn a - b;
};
```
아래는 호이스팅에 의해 실제 자바스크립트 엔진이 동작하는 과정

```js
function sum(a, b) {  // 함수 선언문은 전체를 호이스팅한다.
  return a + b;
};

var minus;                      // 변수는 선언부만 호이스팅한다.

console.log(sum(1, 2));
console.log(minus(5, 2));       // 'minus is not a function' 에러 메시지

minus = function(a, b) {        // 변수의 할당부는 원래 자리에 남겨둔다.
  reutrn a - b;
};
```


### 결론

함수 선언식과 함수 표현식 모두 사용할 수 있지만, 함수 선언식 대신 이름이 있는 기명함수 표현식을 권장하고 있다.

```js
// bad
function foo() {
  // ...
}
 
// bad
const foo = function () {
  // ...
};
 
// good
// lexical name distinguished from the variable-referenced invocation(s)
const short = function longUniqueMoreDescriptiveLexicalFoo() {
  // ...
};
```

### 화살표 함수

화살표함수는 함수 표현식과 호이스팅이 동일하다. 함수표현식보다 단순하고 간결한 문법으로 함수를 만들 수 있다.
```js
const sayApeach =()=>{
console.log('sayApeach')
}
```

### this

function 키워드로 생성한 일반함수와 화살표 함수의 가장 큰 차이는 this다.

#### 일반함수의 this

자바스크립의 경우 





