### SPA란

최초 한번 페이지 전체를 로딩한 후 데이터만 변경하여 사용할 수 있는
애플리케이션 (1개의 page에서 여러가지 동작이 이루어지는 방식)

### CSR 클라이언트 사이드 렌더링
클라이언트 사이드 렌더링은 클라이언트인 브라우저가 렌더링을 처리하는 방식이다. 즉, 서버에서 받은 데이터를 통해 클라이언트인 `브라우저가 화면을 그리는 주체가 되는 것`이다.
서버에서 인덱스라는 HTML파일을 클라이언트에 보내주면 처음에 접속하면 빈 화면만 보인다. js를 다시 서버로부터 다운로드 받는다. 이 js파일은 어플리케이션을 구동하는 프레임워크과 라이브러리의 소스코드들도 다 포함된다.
사용자의 행동에 따라 필요한 부분만 다시 읽어들이기에 서버측에서 렌더링하여 전체 페이지를 다시 읽어들이는 것보다 빠른 인터렉션을 기대할 수 있다.

#### CSR 문제점
1) 사용자가 첫 화면을 보기까지 시간이 오래걸릴 수 있다. 즉 첫 페이지 로딩 속도가 느리다.
- 서버에 첫 요청시 전체 페이지에 대한 모든 문서파일들을 받다보니 서버 사이드 렌더링보다 로딩속도가 느리다.
2) SEO가 좋지 않다.
csr에서 사용되고 있는 HTML바디는 대부분 텅텅비어져있다. 검색엔진들이 CSR로 작성된 웹페이지를 분석하는데 많은 어려움이 있다.

### SSR 서버 사이드 렌더링
서버사이드렌더링은 클라이언트(브라우저)가 서버에 매번 데이터를 요청하여 서버에서 처리하는 방식이다. 클라이언트에서 요청이 들어올 때마다 매번 서버에서 새로운 화면을 만들어 제공하는 것이다.
`즉, 서버가 화면을 그리는 주체가 된다.`
`SSR의 최대 장점은 SEO 검색엔진 최적화`이다. SSR은 한번에 렌더링되기에 첫번째(초기) 로딩속도는 빠르지만, page이동시에는 CSR보다 느리다.
SSR 서버사이드 렌더링은 요청시마다 새로고침이 일어나며 서버에 새로운 페이지에 대한 요청을 하는 방식이다

웹사이트에 접속하면 이제 서버에서 필요한 데이터를 모두 가져와서 HTML파일을 만들게 되고 이렇게 잘 만들어진 HTML파일을 동적으로 조금 제어할 수 있는 소스코드와 함께 클라이언트에게 보내주게 된다.

#### SSR문제점
1)blinking issue
전체 웹사이트를 다시 서버에서 받아오는 것과 동일하기에 썩 좋지 않은 user experience를 겪을 수 있다.
2) 서버 과부하
사용자가 많은 제품일수록 사용자가 클릭할 때마다 서버에 요청해서 서버에서 필요한 데이터를 가지고와서 HTML을 만들어야 하므로 서버에 과부하가 걸리기 쉽다.
3)사용자가 빠르게 웹사이트를 확인할 수 있지만 동적으로 데이터를 처리하는 자바스크립트를 아직 다운로드 받지 못해 여기저기 클릭했을 때, 반응이 없을 수도 있다.

#### SEO 검색 엔진 최적화
구글, 네이버같은 검색 엔진들은 서버에 등록된 웹사이트들을 하나하나 돌아다니면서 웹사이트의 HTML문서를 분석해서 우리가 검색할 때 웹사이트를 빠르게 검색할 수 있게 도와준다.

### 초기 view로딩속도

SSR의 경우 서버에서 렌더링하여 가져오기에 첫 로딩이 매우 짧다. 반면 CSR의 경우 서버에서 view를 렌더하지 않고 브라우저에서 렌더링하기에 SSR보다는 초기 view로딩속도가 오래걸린다

CSR은 페이지를 읽어들이는 시간 +JS를 읽어들이는 시간 + JS가 화면을 그리는 시간 위 작업이 완료 후 콘텐츠가 사용자에게 보여진다. 즉 초기 구동속도가 느리다는 단점이 존재한다. 물론 초기 구동속도를 제외하면 그 다음부터는 빠른 인터랙션의 성능을 보인다.

### 정리

SSR의 경우 초기 로딩속도가 빠르고 SEO에 유리하지만 View변경시 서버에 계속 요청을 해야하므로 서버에 부담이 크다.
CSR의 경우 초기 로딩속도는 느리지만 초기로딩 후에는 서버에 다시 요청할 필요없이 클라이언트 내에서 작업이 이루어지므로 매우빠르다. 하지만 SEO에 대한 문제가 있다.
